 
import * as cdk from 'aws-cdk-lib';
import { CfnNotebookInstance, CfnNotebookInstanceLifecycleConfig } from 'aws-cdk-lib/aws-sagemaker';
import * as iam from 'aws-cdk-lib/aws-iam';
import { Vpc } from 'aws-cdk-lib/aws-ec2';

export class SagemakerstackStack extends cdk.Stack {
  public readonly sageMakerNotebookInstanceOutput: cdk.CfnOutput;
  public readonly sageMakerExecutionRoleOutput: cdk.CfnOutput;

  constructor(scope: cdk.App, id: string, props: cdk.StackProps = {}) {
    super(scope, id, props);

    // Use dummy VPC ID and subnet IDs
    const vpc = Vpc.fromLookup(this, 'Vpc', {
      vpcId: 'vpc-12345678',  // Dummy VPC ID
    });

    const notebookLifecycleConfig = new CfnNotebookInstanceLifecycleConfig(this, 'NotebookLifecycleConfig', {
      notebookInstanceLifecycleConfigName: 'my-lifecycle-config',
      onStart: [{
        content: cdk.Fn.base64('#!/bin/bash\nset -e\necho "Lifecycle configuration script executed successfully." > /home/ec2-user/lifecycle.log\n'),
      }],
    });

    const sageMakerExecutionRole = new iam.CfnRole(this, 'SageMakerExecutionRole', {
      assumeRolePolicyDocument: {
        Version: '2012-10-17',
        Statement: [{
          Effect: 'Allow',
          Principal: {
            Service: 'sagemaker.amazonaws.com',
          },
          Action: 'sts:AssumeRole',
        }],
      },
      policies: [{
        policyName: 'SageMakerPolicy',
        policyDocument: {
          Version: '2012-10-17',
          Statement: [{
            Effect: 'Allow',
            Action: [
              's3:GetObject',
              's3:PutObject',
              's3:ListBucket',
              'glue:*',
              'athena:*',
            ],
            Resource: '*',
          }],
        },
      }],
    });

    const sageMakerNotebookInstance = new CfnNotebookInstance(this, 'SageMakerNotebookInstance', {
      notebookInstanceName: 'my-sagemaker-notebook',
      instanceType: 'ml.t2.medium',
      roleArn: sageMakerExecutionRole.attrArn,
      volumeSizeInGb: 10,
      directInternetAccess: 'Enabled',
      rootAccess: 'Enabled',
      lifecycleConfigName: notebookLifecycleConfig.ref,
      subnetId: 'subnet-12345678',  // Dummy subnet ID
    });

    this.sageMakerNotebookInstanceOutput = new cdk.CfnOutput(this, 'SageMakerNotebookInstanceOutput', {
      value: sageMakerNotebookInstance.ref,
      description: 'SageMaker Notebook Instance Name',
    });

    this.sageMakerExecutionRoleOutput = new cdk.CfnOutput(this, 'SageMakerExecutionRoleOutput', {
      value: sageMakerExecutionRole.attrArn,
      description: 'SageMaker Execution Role ARN',
    });
  }
}
