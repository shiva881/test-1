import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as events from 'aws-cdk-lib/aws-events';
import { Vpc } from 'aws-cdk-lib/aws-ec2';

export class LambdastackStack extends cdk.Stack {
  public readonly lambdaFunctionArn: cdk.CfnOutput;
  public readonly athenaWorkGroupOutput: cdk.CfnOutput;

  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Use dummy VPC ID and subnet IDs
    const vpc = Vpc.fromLookup(this, 'Vpc', {
      vpcId: 'vpc-12345678',  // Replace with your actual VPC ID
    });

    const athenaServiceRole = new iam.CfnRole(this, 'AthenaServiceRole', {
      assumeRolePolicyDocument: {
        Version: '2012-10-17',
        Statement: [{
          Effect: 'Allow',
          Principal: {
            Service: 'lambda.amazonaws.com',
          },
          Action: 'sts:AssumeRole',
        }],
      },
      policies: [{
        policyName: 'AthenaQueryExecutionPolicy',
        policyDocument: {
          Version: '2012-10-17',
          Statement: [{
            Effect: 'Allow',
            Action: [
              'athena:StartQueryExecution',
              'athena:GetQueryExecution',
              'athena:GetQueryResults',
            ],
            Resource: '*',
          }],
        },
      }],
    });

    const lambdaExecutionRole = new iam.CfnRole(this, 'LambdaExecutionRole', {
      assumeRolePolicyDocument: {
        Version: '2012-10-17',
        Statement: [{
          Effect: 'Allow',
          Principal: {
            Service: 'lambda.amazonaws.com',
          },
          Action: 'sts:AssumeRole',
        }],
      },
      policies: [{
        policyName: 'LambdaExecutionPolicy',
        policyDocument: {
          Version: '2012-10-17',
          Statement: [{
            Effect: 'Allow',
            Action: [
              'logs:CreateLogGroup',
              'logs:CreateLogStream',
              'logs:PutLogEvents',
              'athena:StartQueryExecution',
              'athena:GetQueryExecution',
              'athena:GetQueryResults',
            ],
            Resource: '*',
          }],
        },
      }],
    });

    const athenaQueryLambdaFunction = new lambda.CfnFunction(this, 'AthenaQueryLambdaFunction', {
      handler: 'index.handler',
      code: {
        zipFile: `import boto3

def lambda_handler(event, context):
    client = boto3.client('athena')
    query = "SELECT * FROM my_table WHERE column = 'value'"
    response = client.start_query_execution(
        QueryString=query,
        QueryExecutionContext={
            'Database': 'my-database'
        },
        ResultConfiguration={
            'OutputLocation': 's3://my-bucket/'
        }
    )
    return response`
      },
      role: lambdaExecutionRole.attrArn,
      runtime: 'python3.8',
      timeout: 60,
      vpcConfig: {
        subnetIds: ['subnet-12345678'],  // Replace with your actual subnet IDs
        securityGroupIds: ['sg-12345678'],  // Replace with your actual Security Group IDs
      },
    });

    const athenaQuerySchedule = new events.CfnRule(this, 'AthenaQuerySchedule', {
      scheduleExpression: 'rate(5 minutes)',
      description: 'Schedule to run Athena query every 5 minutes',
      state: 'ENABLED',
      targets: [{
        id: 'RunAthenaQueryTarget',
        arn: athenaQueryLambdaFunction.attrArn,
      }],
    });

    this.lambdaFunctionArn = new cdk.CfnOutput(this, 'LambdaFunctionARN', {
      value: athenaQueryLambdaFunction.attrArn,
      description: 'Lambda function ARN to run Athena query',
    });

    this.athenaWorkGroupOutput = new cdk.CfnOutput(this, 'AthenaWorkGroupOutput', {
      value: props?.athenaWorkGroup ?? 'default',
      description: 'Athena WorkGroup name used in the automation',
    });
  }
}
